(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("EtherealColor", [], factory);
	else if(typeof exports === 'object')
		exports["EtherealColor"] = factory();
	else
		root["EtherealColor"] = factory();
})((typeof self !== 'undefined' ? self : this), function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Color = void 0;

var input_1 = __webpack_require__(2);

var utils_1 = __webpack_require__(1);

function Color() {
  var userInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#ffffff';
  var input = input_1.Input();
  var utils = utils_1.Utils();
  var state = input.normalizeColor({
    from: userInput
  }); // ====================================================================================
  // Private Methods
  // ====================================================================================

  function getState() {
    return state;
  }

  function setState(newState) {
    return state = newState;
  } // ====================================================================================
  // Public Methods
  // ====================================================================================


  function set(newUserInput) {
    var newPrivateState = input.normalizeColor({
      from: newUserInput
    });
    setState(newPrivateState);
  }

  function get(format) {
    var privateState = getState();
    var publicState = {
      object: privateState.object[format],
      string: privateState.string[format]
    };
    return publicState;
  }

  function random(basePalette) {
    var useCustomPalette = Boolean(basePalette);
    var r;
    var b;
    var g;

    if (useCustomPalette) {
      var _basePalette$get = basePalette.get(),
          _basePalette$get2 = _slicedToArray(_basePalette$get, 2),
          colorBaseOne = _basePalette$get2[0],
          colorBaseTwo = _basePalette$get2[1];

      var _colorBaseOne$get$obj = colorBaseOne.get('rgb').object,
          r1 = _colorBaseOne$get$obj.r,
          g1 = _colorBaseOne$get$obj.g,
          b1 = _colorBaseOne$get$obj.b;
      var _colorBaseTwo$get$obj = colorBaseTwo.get('rgb').object,
          r2 = _colorBaseTwo$get$obj.r,
          g2 = _colorBaseTwo$get$obj.g,
          b2 = _colorBaseTwo$get$obj.b;
      var scale = [0, 100];
      var randomScale = utils.randomInt.apply(utils, scale);
      var scaleToRed = utils.interpolate(scale, [r1, r2]);
      var scaleToGreen = utils.interpolate(scale, [g1, g2]);
      var scaleToBlue = utils.interpolate(scale, [b1, b2]);
      r = scaleToRed(randomScale);
      g = scaleToGreen(randomScale);
      b = scaleToBlue(randomScale);
    } else {
      r = utils.randomInt(0, 255);
      g = utils.randomInt(0, 255);
      b = utils.randomInt(0, 255);
    }

    var color = Color({
      r: r,
      g: g,
      b: b
    });
    set(color.get('rgb').object);
  }

  var self = {
    set: set,
    get: get,
    random: random
  };
  return Object.freeze(self);
}

exports.Color = Color;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Utils = void 0;

function Utils() {
  function interpolate(xInterval, yInterval) {
    var _xInterval = _slicedToArray(xInterval, 2),
        x0 = _xInterval[0],
        x1 = _xInterval[1];

    var _yInterval = _slicedToArray(yInterval, 2),
        y0 = _yInterval[0],
        y1 = _yInterval[1];

    return function (xA) {
      if (xA > x1) xA = x1;else if (xA < x0) xA = x0;
      var yA = y0 + (y1 - y0) * ((xA - x0) / (x1 - x0));
      return oneDecimalPlace(yA);
    };
  }

  function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }

  function averageBetween(smaller, bigger) {
    return (bigger - smaller) / 2 + smaller;
  }

  function getValueInRange(_ref) {
    var increment = _ref.increment,
        range = _ref.range,
        value = _ref.value;

    var _range = _slicedToArray(range, 2),
        min = _range[0],
        max = _range[1];

    var newValue = value + increment;
    return newValue < min ? min : newValue > max ? max : newValue;
  }

  function itsBetween(value, range) {
    var _range2 = _slicedToArray(range, 2),
        min = _range2[0],
        max = _range2[1];

    return value >= min && value <= max;
  }

  function oneDecimalPlace(value) {
    var isNecessaryToFormat = Boolean(value.toString().match(/\.[0-9][0-9]*/g));
    if (!isNecessaryToFormat) return value;
    return Number(value.toFixed(1));
  }

  var self = {
    interpolate: interpolate,
    randomInt: randomInt,
    averageBetween: averageBetween,
    getValueInRange: getValueInRange,
    itsBetween: itsBetween,
    oneDecimalPlace: oneDecimalPlace
  };
  return Object.freeze(self);
}

exports.Utils = Utils;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = void 0;

var utils_1 = __webpack_require__(1);

var converter_1 = __webpack_require__(3);

var color_1 = __webpack_require__(0);

function Input() {
  var utils = utils_1.Utils();
  var converter = converter_1.Converter();
  var percentToRgb = utils.interpolate([0, 100], [0, 255]);
  var getValueInRange = utils.getValueInRange;

  function normalizeColor(_ref) {
    var colorInAnyFormat = _ref.from;
    var isHex = false;
    var isRgb = false;
    var isHsl = false;
    var hex;
    var rgb;
    var hsl;

    if (typeof colorInAnyFormat === 'string') {
      colorInAnyFormat = colorInAnyFormat.replace(/\s+/g, '').toLowerCase();
      isHex = Boolean(colorInAnyFormat.match(/^#/));
      isRgb = Boolean(colorInAnyFormat.match(/^rgb/));
      isHsl = Boolean(colorInAnyFormat.match(/^hsl/));

      if (!(isHex || isRgb || isHsl)) {
        throw new Error('Invalid color string, must be a RGB, Hexadecimal or HSL format');
      }

      var r;
      var g;
      var b;

      if (isHex) {
        var _colorInAnyFormat = colorInAnyFormat,
            length = _colorInAnyFormat.length;

        if (length === 4) {
          r = colorInAnyFormat[1] + colorInAnyFormat[1];
          g = colorInAnyFormat[2] + colorInAnyFormat[2];
          b = colorInAnyFormat[3] + colorInAnyFormat[3];
        } else if (length === 7) {
          r = colorInAnyFormat[1] + colorInAnyFormat[2];
          g = colorInAnyFormat[3] + colorInAnyFormat[4];
          b = colorInAnyFormat[5] + colorInAnyFormat[6];
        } else {
          throw new Error('Opacity is not supported, try to use #FFF or #FFFFFF format');
        }

        hex = {
          r: r,
          g: g,
          b: b
        };
        rgb = converter.hexToRgb(hex);
        hsl = converter.rgbToHsl(rgb);
      } else if (isRgb) {
        var _colorInAnyFormat$rep = colorInAnyFormat.replace(/(\()|(\))|(rgb)/g, '').split(','),
            _colorInAnyFormat$rep2 = _slicedToArray(_colorInAnyFormat$rep, 3),
            redValue = _colorInAnyFormat$rep2[0],
            greenValue = _colorInAnyFormat$rep2[1],
            blueValue = _colorInAnyFormat$rep2[2];

        var percentOccurrences = colorInAnyFormat.match(/%/g);

        if (percentOccurrences && percentOccurrences.length < 3) {
          throw new Error('You must use only percentage or only numbers in the color configuration');
        }

        var usePercent = Boolean(percentOccurrences);
        r = usePercent ? percentToRgb(Number(redValue.replace(/%/g, ''))) : Number(redValue);
        g = usePercent ? percentToRgb(Number(greenValue.replace(/%/g, ''))) : Number(greenValue);
        b = usePercent ? percentToRgb(Number(blueValue.replace(/%/g, ''))) : Number(blueValue);
        rgb = {
          r: r,
          g: g,
          b: b
        };
        hex = converter.rgbToHex(rgb);
        hsl = converter.rgbToHsl(rgb);
      } else if (isHsl) {
        var _colorInAnyFormat$rep3 = colorInAnyFormat.replace(/(\()|(\))|(hsl)|(%)/g, '').split(','),
            _colorInAnyFormat$rep4 = _slicedToArray(_colorInAnyFormat$rep3, 3),
            hueValue = _colorInAnyFormat$rep4[0],
            saturationValue = _colorInAnyFormat$rep4[1],
            brightnessValue = _colorInAnyFormat$rep4[2];

        var h = Number(hueValue);
        var s = Number(saturationValue);
        var l = Number(brightnessValue);
        hsl = {
          h: h,
          s: s,
          l: l
        };
        rgb = converter.hslToRgb(hsl);
        hex = converter.rgbToHex(rgb);
      } else {
        throw new Error('Only theses formats are valid: RGB, Hexadecimal and HSL');
      }
    } else {
      isHex = typeof colorInAnyFormat.r === 'string';
      isRgb = typeof colorInAnyFormat.r === 'number';
      isHsl = typeof colorInAnyFormat.h === 'number';

      if (!isHex && !isRgb && !isHsl) {
        throw new Error('The input must be a valid color string or a valid "Color" object');
      }

      if (isRgb) {
        rgb = colorInAnyFormat;
        hex = converter.rgbToHex(rgb);
        hsl = converter.rgbToHsl(rgb);
      } else if (isHex) {
        hex = colorInAnyFormat;
        rgb = converter.hexToRgb(hex);
        hsl = converter.rgbToHsl(rgb);
      } else {
        hsl = colorInAnyFormat;
        rgb = converter.hslToRgb(hsl);
        hex = converter.rgbToHex(rgb);
      }
    }

    var hexString = "#".concat(hex.r).concat(hex.g).concat(hex.b);
    var rgbString = "rgb(".concat(rgb.r, ", ").concat(rgb.g, ", ").concat(rgb.b, ")");
    var hslString = "hsl(".concat(hsl.h, ", ").concat(hsl.s, "%, ").concat(hsl.l, "%)");
    return {
      string: {
        hex: hexString,
        rgb: rgbString,
        hsl: hslString
      },
      object: {
        rgb: rgb,
        hex: hex,
        hsl: hsl
      }
    };
  }

  function normalizePalette(_ref2) {
    var paletteInAnyFormat = _ref2.from,
        range = _ref2.options.range;
    var useRange = typeof paletteInAnyFormat.random === 'function';
    var useCustomRange = typeof paletteInAnyFormat.map === 'function';
    var baseColor;

    if (useRange) {
      baseColor = paletteInAnyFormat;
    } else if (useCustomRange) {
      return paletteInAnyFormat;
    } else {
      throw new Error('The Palette param must be a Color or Array of Colors');
    }

    var colorRef = baseColor.get('rgb').object;
    var colorOne = {
      r: getValueInRange({
        increment: -range,
        range: [0, 255],
        value: colorRef.r
      }),
      g: getValueInRange({
        increment: -range,
        range: [0, 255],
        value: colorRef.g
      }),
      b: getValueInRange({
        increment: -range,
        range: [0, 255],
        value: colorRef.b
      })
    };
    var colorTwo = {
      r: getValueInRange({
        increment: range,
        range: [0, 255],
        value: colorRef.r
      }),
      g: getValueInRange({
        increment: range,
        range: [0, 255],
        value: colorRef.g
      }),
      b: getValueInRange({
        increment: range,
        range: [0, 255],
        value: colorRef.b
      })
    };
    return [color_1.Color(colorOne), color_1.Color(colorTwo)];
  }

  function normalizeGradient(_ref3) {
    var basePalette = _ref3.from,
        count = _ref3.options.count;
    var initialColor = basePalette.get()[0].get('rgb').object;
    var finalColor = basePalette.get()[1].get('rgb').object;
    var difR = finalColor.r - initialColor.r;
    var difG = finalColor.g - initialColor.g;
    var difB = finalColor.b - initialColor.b;
    var incrementR = difR / (count - 1);
    var incrementG = difG / (count - 1);
    var incrementB = difB / (count - 1);
    var colors = [];

    for (var i = 0, r = initialColor.r, g = initialColor.g, b = initialColor.b; i < count; i++, r += incrementR, g += incrementG, b += incrementB) {
      var color = color_1.Color({
        r: utils.oneDecimalPlace(r),
        g: utils.oneDecimalPlace(g),
        b: utils.oneDecimalPlace(b)
      });
      colors.push(color);
    }

    return colors;
  }

  var self = {
    normalizeColor: normalizeColor,
    normalizePalette: normalizePalette,
    normalizeGradient: normalizeGradient
  };
  return Object.freeze(self);
}

exports.Input = Input;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Converter = void 0;

var utils_1 = __webpack_require__(1);

function Converter() {
  var utils = utils_1.Utils();

  function rgbToHsl(_ref) {
    var r = _ref.r,
        g = _ref.g,
        b = _ref.b;
    var r1 = r / 255;
    var g1 = g / 255;
    var b1 = b / 255;
    var maxColor = Math.max(r1, g1, b1);
    var minColor = Math.min(r1, g1, b1);
    var L = (maxColor + minColor) / 2;
    var S = 0;
    var H = 0;

    if (maxColor !== minColor) {
      if (L < 0.5) S = (maxColor - minColor) / (maxColor + minColor);else S = (maxColor - minColor) / (2.0 - maxColor - minColor);

      if (r1 === maxColor) {
        H = (g1 - b1) / (maxColor - minColor);
      } else if (g1 === maxColor) {
        H = 2.0 + (b1 - r1) / (maxColor - minColor);
      } else H = 4.0 + (r1 - g1) / (maxColor - minColor);
    }

    L = L * 100;
    S = S * 100;
    H = H * 60;
    if (H < 0) H += 360;
    var result = {
      h: Math.abs(utils.oneDecimalPlace(H)),
      l: Math.abs(utils.oneDecimalPlace(L)),
      s: Math.abs(utils.oneDecimalPlace(S))
    };
    return result;
  }

  function hslToRgb(_ref2) {
    var h = _ref2.h,
        s = _ref2.s,
        l = _ref2.l;
    var r;
    var g;
    var b;
    var m;
    var c;
    var x;
    if (!isFinite(h)) h = 0;
    if (!isFinite(s)) s = 0;
    if (!isFinite(l)) l = 0;
    h /= 60;
    if (h < 0) h = 6 - -h % 6;
    h %= 6;
    s = Math.max(0, Math.min(1, s / 100));
    l = Math.max(0, Math.min(1, l / 100));
    c = (1 - Math.abs(2 * l - 1)) * s;
    x = c * (1 - Math.abs(h % 2 - 1));

    if (h < 1) {
      r = c;
      g = x;
      b = 0;
    } else if (h < 2) {
      r = x;
      g = c;
      b = 0;
    } else if (h < 3) {
      r = 0;
      g = c;
      b = x;
    } else if (h < 4) {
      r = 0;
      g = x;
      b = c;
    } else if (h < 5) {
      r = x;
      g = 0;
      b = c;
    } else {
      r = c;
      g = 0;
      b = x;
    }

    m = l - c / 2;
    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);
    return {
      r: Math.abs(r),
      g: Math.abs(g),
      b: Math.abs(b)
    };
  }

  function rgbToHex(_ref3) {
    var r = _ref3.r,
        g = _ref3.g,
        b = _ref3.b;

    var componentToHex = function componentToHex(component) {
      var hex = component.toString(16);
      return hex.length === 1 ? '0' + hex : hex;
    };

    return {
      r: componentToHex(r),
      g: componentToHex(g),
      b: componentToHex(b)
    };
  }

  function hexToRgb(_ref4) {
    var r = _ref4.r,
        g = _ref4.g,
        b = _ref4.b;
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    var hex = "#".concat(r).concat(g).concat(b).replace(shorthandRegex, function (_, r1, g1, b1) {
      return r1 + r1 + g1 + g1 + b1 + b1;
    });
    var format = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex) || '#FFFFFF';

    if (!format) {
      throw new Error("Impossible to convert: 'rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")' to Hexadecimal"));
    }

    return {
      r: Math.abs(parseInt(format[1], 16)),
      g: Math.abs(parseInt(format[2], 16)),
      b: Math.abs(parseInt(format[3], 16))
    };
  }

  var self = {
    rgbToHsl: rgbToHsl,
    hslToRgb: hslToRgb,
    rgbToHex: rgbToHex,
    hexToRgb: hexToRgb
  };
  return Object.freeze(self);
}

exports.Converter = Converter;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Palette = void 0;

var input_1 = __webpack_require__(2);

var color_1 = __webpack_require__(0);

var utils_1 = __webpack_require__(1);

var utils = utils_1.Utils();
var defaultOptions = {
  range: 40
};

function Palette() {
  var userInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : color_1.Color();
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
  var input = input_1.Input();
  var state = input.normalizePalette({
    from: userInput,
    options: options
  });

  function get() {
    return state;
  }

  function set(newUserInput) {
    var newOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
    var newState = input.normalizePalette({
      from: newUserInput,
      options: newOptions
    });
    state = newState;
  }

  function random() {
    var newOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      range: utils.randomInt(40, 255)
    };
    var color = color_1.Color();
    color.random();
    set(color, newOptions);
  }

  var self = {
    get: get,
    set: set,
    random: random
  };
  return Object.freeze(self);
}

exports.Palette = Palette;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(6);


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var color_1 = __webpack_require__(0);

var palette_1 = __webpack_require__(4);

var gradient_1 = __webpack_require__(7);

var converter_1 = __webpack_require__(3);

var EtherealColor = Object.freeze({
  Color: color_1.Color,
  Palette: palette_1.Palette,
  Gradient: gradient_1.Gradient,
  Converter: converter_1.Converter
});
exports["default"] = EtherealColor; // @ts-ignore

module.exports = EtherealColor;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Gradient = void 0;

var palette_1 = __webpack_require__(4);

var color_1 = __webpack_require__(0);

var input_1 = __webpack_require__(2);

var defaultOptions = {
  count: 5
};

function Gradient() {
  var userInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : palette_1.Palette(color_1.Color());
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
  var input = input_1.Input();
  var state = input.normalizeGradient({
    from: userInput,
    options: options
  });

  function toStringArray(format) {
    return state.map(function (color) {
      return color.get(format).string;
    });
  }

  function toObjectArray(format) {
    return state.map(function (color) {
      return color.get(format).object;
    });
  }

  function toColorArray() {
    return state;
  }

  function set(newUserInput) {
    var newOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
    var newState = input.normalizeGradient({
      from: newUserInput,
      options: newOptions
    });
    state = newState;
  }

  function random(newOptions) {
    var palette = palette_1.Palette();
    palette.random();
    set(palette, newOptions);
  }

  var self = {
    toStringArray: toStringArray,
    toObjectArray: toObjectArray,
    toColorArray: toColorArray,
    set: set,
    random: random
  };
  return Object.freeze(self);
}

exports.Gradient = Gradient;

/***/ })
/******/ ]);
});